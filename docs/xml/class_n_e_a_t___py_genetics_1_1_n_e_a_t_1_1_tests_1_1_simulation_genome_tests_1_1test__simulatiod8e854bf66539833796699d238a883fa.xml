<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa" kind="class" language="Python" prot="public">
    <compoundname>NEAT_PyGenetics::NEAT::Tests::SimulationGenomeTests::test_simulationNodes::TestSimulationNode</compoundname>
    <basecompoundref prot="public" virt="non-virtual">TestCase</basecompoundref>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1a58ee9548720e0cbc77056697727a0e74" prot="public" static="no" mutable="no">
        <type></type>
        <definition>NEAT_PyGenetics.NEAT.Tests.SimulationGenomeTests.test_simulationNodes.TestSimulationNode::rand</definition>
        <argsstring></argsstring>
        <name>rand</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" line="12" column="1" bodyfile="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" bodystart="12" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1a4f0dea64069a60e1044bea518e71eb2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def NEAT_PyGenetics.NEAT.Tests.SimulationGenomeTests.test_simulationNodes.TestSimulationNode.setUp</definition>
        <argsstring>(self)</argsstring>
        <name>setUp</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" line="11" column="1" bodyfile="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" bodystart="11" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1a8e78e199d86083cfb7e2b24f8d749f53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def NEAT_PyGenetics.NEAT.Tests.SimulationGenomeTests.test_simulationNodes.TestSimulationNode.test_createNodeWithoutInitialValue</definition>
        <argsstring>(self)</argsstring>
        <name>test_createNodeWithoutInitialValue</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Checks, that casually initializing a Node works as intended.
:return:
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" line="15" column="1" bodyfile="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" bodystart="15" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1a946f16257d774eb20ebbc39ffbba80fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def NEAT_PyGenetics.NEAT.Tests.SimulationGenomeTests.test_simulationNodes.TestSimulationNode.test_createNodeWithInitialValue</definition>
        <argsstring>(self)</argsstring>
        <name>test_createNodeWithInitialValue</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Generates 100 random values from -1 to 2 and creates nodes with them as
initial values. Checks, that for values below zero and above one a
ValueError is raised.
:return:
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" line="26" column="1" bodyfile="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" bodystart="26" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1a2204237f3ad2e72d386f5c58a6a66718" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def NEAT_PyGenetics.NEAT.Tests.SimulationGenomeTests.test_simulationNodes.TestSimulationNode.test_resetNode</definition>
        <argsstring>(self)</argsstring>
        <name>test_resetNode</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Tests, that resetting a node returns its value to zero.
:return:
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" line="42" column="1" bodyfile="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" bodystart="42" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1a83849a9e57a26f12bd9512d726169155" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def NEAT_PyGenetics.NEAT.Tests.SimulationGenomeTests.test_simulationNodes.TestSimulationNode.test_resetNodeWithInitialValue</definition>
        <argsstring>(self)</argsstring>
        <name>test_resetNodeWithInitialValue</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Tests, that resetting a node that was initialized with a value returns
its value to that initial value.
:return:
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" line="52" column="1" bodyfile="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" bodystart="52" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1ae62c393e1902601513fc583afc76cc26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def NEAT_PyGenetics.NEAT.Tests.SimulationGenomeTests.test_simulationNodes.TestSimulationNode.test_addSuccessor</definition>
        <argsstring>(self)</argsstring>
        <name>test_addSuccessor</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Generates 100 random values from -1 to 2. Creates new nodes for every
value and adds them using the generated value as the weight.
Checks, that for values below zero and above one a
ValueError is raised.
:return:
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" line="63" column="1" bodyfile="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" bodystart="63" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1aab4bc7e936bf62a62a3103528f3dc4ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def NEAT_PyGenetics.NEAT.Tests.SimulationGenomeTests.test_simulationNodes.TestSimulationNode.test_addSuccessorThatAlreadyExists</definition>
        <argsstring>(self)</argsstring>
        <name>test_addSuccessorThatAlreadyExists</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Adds the same node multiple times to another node and expects it to
raise an Exception.
:return:
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" line="80" column="1" bodyfile="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" bodystart="80" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1a60e903a3c955ac9fe7245f8dc9df81f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def NEAT_PyGenetics.NEAT.Tests.SimulationGenomeTests.test_simulationNodes.TestSimulationNode.test_addSuccessors</definition>
        <argsstring>(self)</argsstring>
        <name>test_addSuccessors</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Generates a list of nodes, appends it to a test node and checks, if
add_successor was called for every node.
:return:
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" line="93" column="1" bodyfile="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" bodystart="93" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1a5db57231e1465f7659a5875e7ca4bf8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def NEAT_PyGenetics.NEAT.Tests.SimulationGenomeTests.test_simulationNodes.TestSimulationNode.test_addSuccessorsOfWhichOneAlreadyExists</definition>
        <argsstring>(self)</argsstring>
        <name>test_addSuccessorsOfWhichOneAlreadyExists</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Generates a list of nodes and duplicates some of them.
Then checks, if appending the list to a node raises an Exception.
:return:
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" line="106" column="1" bodyfile="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" bodystart="106" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1aba98791f76639d8e17987dfbfd544ce2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def NEAT_PyGenetics.NEAT.Tests.SimulationGenomeTests.test_simulationNodes.TestSimulationNode.test_fireNode</definition>
        <argsstring>(self)</argsstring>
        <name>test_fireNode</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Generates a list of nodes and weights, and a test node and their initial
value. Then adds the list as successors to the node and calls fire.
Checks that all values are calculated correctly.
Also checks that firing multiple times sums the values.
:return:
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" line="121" column="1" bodyfile="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" bodystart="121" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1a9bd84563b74b73f13f5578c7373ec6a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def NEAT_PyGenetics.NEAT.Tests.SimulationGenomeTests.test_simulationNodes.TestSimulationNode.test_addValueToNode</definition>
        <argsstring>(self)</argsstring>
        <name>test_addValueToNode</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Tests, that add_value simply adds a given value to the stored value.
:return:
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" line="151" column="1" bodyfile="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" bodystart="151" bodyend="160"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="285">
        <label>NEAT_PyGenetics.NEAT.Tests.SimulationGenomeTests.test_simulationNodes.TestSimulationNode</label>
        <link refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa"/>
        <childnode refid="286" relation="public-inheritance">
        </childnode>
      </node>
      <node id="286">
        <label>unittest::TestCase</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="287">
        <label>NEAT_PyGenetics.NEAT.Tests.SimulationGenomeTests.test_simulationNodes.TestSimulationNode</label>
        <link refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa"/>
        <childnode refid="288" relation="public-inheritance">
        </childnode>
      </node>
      <node id="288">
        <label>unittest::TestCase</label>
      </node>
    </collaborationgraph>
    <location file="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" line="10" column="1" bodyfile="NEAT/Tests/SimulationGenomeTests/test_simulationNodes.py" bodystart="10" bodyend="161"/>
    <listofallmembers>
      <member refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1a58ee9548720e0cbc77056697727a0e74" prot="public" virt="non-virtual"><scope>NEAT_PyGenetics::NEAT::Tests::SimulationGenomeTests::test_simulationNodes::TestSimulationNode</scope><name>rand</name></member>
      <member refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1a4f0dea64069a60e1044bea518e71eb2a" prot="public" virt="non-virtual"><scope>NEAT_PyGenetics::NEAT::Tests::SimulationGenomeTests::test_simulationNodes::TestSimulationNode</scope><name>setUp</name></member>
      <member refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1ae62c393e1902601513fc583afc76cc26" prot="public" virt="non-virtual"><scope>NEAT_PyGenetics::NEAT::Tests::SimulationGenomeTests::test_simulationNodes::TestSimulationNode</scope><name>test_addSuccessor</name></member>
      <member refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1a60e903a3c955ac9fe7245f8dc9df81f7" prot="public" virt="non-virtual"><scope>NEAT_PyGenetics::NEAT::Tests::SimulationGenomeTests::test_simulationNodes::TestSimulationNode</scope><name>test_addSuccessors</name></member>
      <member refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1a5db57231e1465f7659a5875e7ca4bf8e" prot="public" virt="non-virtual"><scope>NEAT_PyGenetics::NEAT::Tests::SimulationGenomeTests::test_simulationNodes::TestSimulationNode</scope><name>test_addSuccessorsOfWhichOneAlreadyExists</name></member>
      <member refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1aab4bc7e936bf62a62a3103528f3dc4ef" prot="public" virt="non-virtual"><scope>NEAT_PyGenetics::NEAT::Tests::SimulationGenomeTests::test_simulationNodes::TestSimulationNode</scope><name>test_addSuccessorThatAlreadyExists</name></member>
      <member refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1a9bd84563b74b73f13f5578c7373ec6a8" prot="public" virt="non-virtual"><scope>NEAT_PyGenetics::NEAT::Tests::SimulationGenomeTests::test_simulationNodes::TestSimulationNode</scope><name>test_addValueToNode</name></member>
      <member refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1a946f16257d774eb20ebbc39ffbba80fe" prot="public" virt="non-virtual"><scope>NEAT_PyGenetics::NEAT::Tests::SimulationGenomeTests::test_simulationNodes::TestSimulationNode</scope><name>test_createNodeWithInitialValue</name></member>
      <member refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1a8e78e199d86083cfb7e2b24f8d749f53" prot="public" virt="non-virtual"><scope>NEAT_PyGenetics::NEAT::Tests::SimulationGenomeTests::test_simulationNodes::TestSimulationNode</scope><name>test_createNodeWithoutInitialValue</name></member>
      <member refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1aba98791f76639d8e17987dfbfd544ce2" prot="public" virt="non-virtual"><scope>NEAT_PyGenetics::NEAT::Tests::SimulationGenomeTests::test_simulationNodes::TestSimulationNode</scope><name>test_fireNode</name></member>
      <member refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1a2204237f3ad2e72d386f5c58a6a66718" prot="public" virt="non-virtual"><scope>NEAT_PyGenetics::NEAT::Tests::SimulationGenomeTests::test_simulationNodes::TestSimulationNode</scope><name>test_resetNode</name></member>
      <member refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_simulation_genome_tests_1_1test__simulatiod8e854bf66539833796699d238a883fa_1a83849a9e57a26f12bd9512d726169155" prot="public" virt="non-virtual"><scope>NEAT_PyGenetics::NEAT::Tests::SimulationGenomeTests::test_simulationNodes::TestSimulationNode</scope><name>test_resetNodeWithInitialValue</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
