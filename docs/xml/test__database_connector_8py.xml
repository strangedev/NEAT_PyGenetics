<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="test__database_connector_8py" kind="file" language="Python">
    <compoundname>test_databaseConnector.py</compoundname>
    <innerclass refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_repository_tests_1_1test__database_connector_1_1_database_connector_test" prot="public">NEAT_PyGenetics::NEAT::Tests::RepositoryTests::test_databaseConnector::DatabaseConnectorTest</innerclass>
    <innernamespace refid="namespace_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_repository_tests_1_1test__database_connector">NEAT_PyGenetics::NEAT::Tests::RepositoryTests::test_databaseConnector</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">import</highlight><highlight class="normal"><sp/>unittest</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>unittest.mock<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>MagicMock</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>NEAT.GenomeStructures.StorageStructure.StorageGenome<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>StorageGenome</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>NEAT.Repository.DatabaseConnector<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>DatabaseConnector</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_repository_tests_1_1test__database_connector_1_1_database_connector_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_repository_tests_1_1test__database_connector_1_1_database_connector_test" kindref="compound">DatabaseConnectorTest</ref>(unittest.TestCase):</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">setUp(self):</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client<sp/>=<sp/>MagicMock()</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>client[</highlight><highlight class="stringliteral">&apos;testbase&apos;</highlight><highlight class="normal">]<sp/>=<sp/>MagicMock()</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_repository_tests_1_1test__database_connector_1_1_database_connector_test_1a9115740100acd95dbd3a72371acfe681" kindref="member">db</ref><sp/>=<sp/>client[</highlight><highlight class="stringliteral">&apos;testbase&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_repository_tests_1_1test__database_connector_1_1_database_connector_test_1aca0cb75295bf0c9964cceef08fa98b7b" kindref="member">collection</ref><sp/>=<sp/>self.<ref refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_repository_tests_1_1test__database_connector_1_1_database_connector_test_1a9115740100acd95dbd3a72371acfe681" kindref="member">db</ref>[</highlight><highlight class="stringliteral">&apos;testbase&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_repository_tests_1_1test__database_connector_1_1_database_connector_test_1aafa6c5991087684c1187c529c8f76682" kindref="member">database_connector</ref><sp/>=<sp/>DatabaseConnector(</highlight><highlight class="stringliteral">&quot;testBase&quot;</highlight><highlight class="normal">,<sp/>client)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">test_getCollection(self):</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(self.collection.__eq__(\</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.database_connector.get_collection(</highlight><highlight class="stringliteral">&apos;testbase&apos;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">test_insertOne(self):</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.collection.insert<sp/>=<sp/>(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x:<sp/>x)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertDictEqual({},<sp/>self.database_connector.insert_one(</highlight><highlight class="stringliteral">&apos;testbase&apos;</highlight><highlight class="normal">,<sp/>{}))</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">test_insertMany(self):</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.collection.insert<sp/>=<sp/>(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x:<sp/>x)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_list<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(1,<sp/>10):</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_list.append({})</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertListEqual(test_list,<sp/>self.database_connector.insert_many(</highlight><highlight class="stringliteral">&quot;testbase&quot;</highlight><highlight class="normal">,<sp/>test_list))</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">test_findOne(self):</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.collection.find_one<sp/>=<sp/>(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x:<sp/>x)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertDictEqual({</highlight><highlight class="stringliteral">&apos;x&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;y&apos;</highlight><highlight class="normal">},<sp/>self.database_connector.find_one(</highlight><highlight class="stringliteral">&apos;testbase&apos;</highlight><highlight class="normal">,<sp/>{</highlight><highlight class="stringliteral">&apos;x&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;y&apos;</highlight><highlight class="normal">}))</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">test_findOneById(self):</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.collection.find_one<sp/>=<sp/>(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x:<sp/>x)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertDictEqual({</highlight><highlight class="stringliteral">&apos;_id&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;123&apos;</highlight><highlight class="normal">},<sp/>self.database_connector.find_one_by_id(</highlight><highlight class="stringliteral">&apos;testbase&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;123&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">test_findMany(self):</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.collection.find<sp/>=<sp/>(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x:<sp/>x)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertDictEqual({</highlight><highlight class="stringliteral">&apos;a&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;c&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">},<sp/>self.database_connector.find_many(</highlight><highlight class="stringliteral">&apos;testbase&apos;</highlight><highlight class="normal">,<sp/>{</highlight><highlight class="stringliteral">&apos;a&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;c&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;d&apos;</highlight><highlight class="normal">}))</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">test_updateOne(self):</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.collection.update<sp/>=<sp/>(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x,<sp/>y:<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.database_connector.update_one(</highlight><highlight class="stringliteral">&apos;testbase&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;22&apos;</highlight><highlight class="normal">,<sp/>{</highlight><highlight class="stringliteral">&apos;test&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;test&apos;</highlight><highlight class="normal">}))</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>@unittest.expectedFailure</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">test_updateManyFail(self):</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.collection.update<sp/>=<sp/>(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x,<sp/>y:<sp/>[x,<sp/>y])</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.database_connector.update_many(</highlight><highlight class="stringliteral">&apos;testbase&apos;</highlight><highlight class="normal">,<sp/>[(1,<sp/>{</highlight><highlight class="stringliteral">&apos;doc&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;doc&apos;</highlight><highlight class="normal">})])</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.fail(self.database_connector.update_many(</highlight><highlight class="stringliteral">&apos;testbase&apos;</highlight><highlight class="normal">,<sp/>[{</highlight><highlight class="stringliteral">&apos;doc&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;doc&apos;</highlight><highlight class="normal">}]))</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">test_updateMany(self):</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.collection.update<sp/>=<sp/>(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x,<sp/>y:<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.database_connector.update_many(</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;testbase&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[(1,<sp/>{</highlight><highlight class="stringliteral">&apos;doc&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;doc&apos;</highlight><highlight class="normal">}),<sp/>(2,<sp/>{</highlight><highlight class="stringliteral">&apos;doc&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;doc&apos;</highlight><highlight class="normal">}),<sp/>(1,<sp/>{</highlight><highlight class="stringliteral">&apos;doc&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;doc&apos;</highlight><highlight class="normal">}),<sp/>(1,<sp/>{</highlight><highlight class="stringliteral">&apos;doc&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;doc&apos;</highlight><highlight class="normal">})]</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>):</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(i)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">test_removeOne(self):</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.collection.remove<sp/>=<sp/>(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x:<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.database_connector.remove_one(</highlight><highlight class="stringliteral">&apos;testbase&apos;</highlight><highlight class="normal">,<sp/>{</highlight><highlight class="stringliteral">&apos;a&apos;</highlight><highlight class="normal">:<sp/>2})</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">test_removeMany(self):</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.collection.remove<sp/>=<sp/>(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>x:<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.database_connector.remove_many(</highlight><highlight class="stringliteral">&apos;testbase&apos;</highlight><highlight class="normal">,<sp/>[12,<sp/>2,<sp/>3]):</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(i)</highlight></codeline>
    </programlisting>
    <location file="NEAT/Tests/RepositoryTests/test_databaseConnector.py"/>
  </compounddef>
</doxygen>
