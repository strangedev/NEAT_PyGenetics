<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="test__command_transcoder_8py" kind="file" language="Python">
    <compoundname>test_commandTranscoder.py</compoundname>
    <innerclass refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_networking_tests_1_1_commands_tests_1_1tesf3907a6c11390aeeb9f3c9bdc4f3b133" prot="public">NEAT_PyGenetics::NEAT::Tests::NetworkingTests::CommandsTests::test_commandTranscoder::TestCommandTranscoder</innerclass>
    <innernamespace refid="namespace_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_networking_tests_1_1_commands_tests_1_1test__command_transcoder">NEAT_PyGenetics::NEAT::Tests::NetworkingTests::CommandsTests::test_commandTranscoder</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">from</highlight><highlight class="normal"><sp/>unittest<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>TestCase</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>NEAT.Networking.Commands.BaseCommand<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>BaseCommand</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>NEAT.Networking.Commands.CommandTranscoder<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>CommandTranscoder</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_networking_tests_1_1_commands_tests_1_1tesf3907a6c11390aeeb9f3c9bdc4f3b133" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_networking_tests_1_1_commands_tests_1_1tesf3907a6c11390aeeb9f3c9bdc4f3b133" kindref="compound">TestCommandTranscoder</ref>(TestCase):</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">setUp(self):</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_networking_tests_1_1_commands_tests_1_1tesf3907a6c11390aeeb9f3c9bdc4f3b133_1ab37426eab44d5bf3cc1175ac7efac8a8" kindref="member">base_command</ref><sp/>=<sp/>BaseCommand()</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_networking_tests_1_1_commands_tests_1_1tesf3907a6c11390aeeb9f3c9bdc4f3b133_1a28601736fc099584cd37ae3370fa8630" kindref="member">command_transcoder</ref><sp/>=<sp/>CommandTranscoder()</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">test_encode_command(self):</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertDictEqual(self.base_command.as_dict(),<sp/>self.command_transcoder.encode_command(self.<ref refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_networking_tests_1_1_commands_tests_1_1tesf3907a6c11390aeeb9f3c9bdc4f3b133_1ab37426eab44d5bf3cc1175ac7efac8a8" kindref="member">base_command</ref>))</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">test_decode_command(self):</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dictionary<sp/>=<sp/>self.base_command.__dict__</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(self.<ref refid="class_n_e_a_t___py_genetics_1_1_n_e_a_t_1_1_tests_1_1_networking_tests_1_1_commands_tests_1_1tesf3907a6c11390aeeb9f3c9bdc4f3b133_1ab37426eab44d5bf3cc1175ac7efac8a8" kindref="member">base_command</ref>,<sp/>self.command_transcoder.decode_command(dictionary))</highlight></codeline>
    </programlisting>
    <location file="NEAT/Tests/NetworkingTests/CommandsTests/test_commandTranscoder.py"/>
  </compounddef>
</doxygen>
