MachineLearning:
  Basic concept:
    We have a number of genomes which can be rated by their fitness. These ge-
    nomes can mutate and breed.
    Genomes are defined by a number of genes and corresponding weights. Each
    gene represents an edge beween two nodes. Each gene has its unique id enco-
    ding its starting node and its target node.
    Later on, genes can consist of other genes. So one gene can contain a clus-
    ter of genes that has one input and one output node (or possibly more, don't
    know if that's possible yet).
    We cluster these genomes by species (similarity) and breed inside these spe-
    cies to ensure, that short-term inefficiency are not left out. Species with
    lower fitness produce less offspring.
    After breeding for a few generations, we cross-breed entire species. On
    which basis these Species will be chosen has still to be determined. This
    will, however, probably produce an entirely new species.
    After this inter-species breeding action we recluster all genomes and start
    again.
    Genomes will after a while be discarded if they fit some criteria. These
    criteria will probably consist of their age, their fitness and the success-
    fullness of their offspring.
  Components:
    Config-File:
      The config file contains configurable basic values.
      ☐ Population Size
      ☐ Cluster count
      ☐ Simulation Name
        Reference to the module that is used for the simulation
      ☐ List of input Nodes of the form [(label, id)]
      ☐ List of output Nodes of the form [(label, id)]
        These ids are used to globally identify input or output nodes.
        These ids are not available for use in breeding.
    Gene:
      ☐ Start Node
      ☐ Target Node
    Gene-Repository:
      Used to store and retrieve Genes. Basically a Flyweight-Pattern implemen-
      tation.
      ☐ Store and retrieve Genes
      ☐ Register, which node ids are already in use
    Genome:
      A coherent collection of Genes.
      Basic Structure:
        Input Layer:
          Nodes whose value is predetermined by some arbitrary input method.
        Output Layer:
          Nodes whose value is used for determining the genome's fitness.
          This may be through calculation or through using the outputs in a
          realtime simulation.
        Optional Database Layer:
          A layer that communicates with a basic data storage
      The cycle problem:
        If a genome contains cycles, they can be easily recognized and marked. Inspite of that they
        provide a difficulty in simulation: if nodes are only fired after all their predecessors
        have fired, a cycle will incur a deadlock. Such a deadlock could be prevented by giving
        'cycle nodes' or 'cycle edges' a default value. But that does not solve the problem, that
        these nodes would have to fire to stop the deadlock.
        How can 'cycle nodes' be manually fired at the right time?
        ☐ Storing 'cycle nodes' seperately in a list in the genome and firing them in advance of the simulation, thus 'preparing' the simulation structure
        ☐ Then, 'cycle nodes' would have to behave differently in the simulation: when they try to give output via a 'cycle edge', they should store that output and use it in advance of the next step
      Storage:
        The stored genes and their corresponding weights must be easily accessi-
        ble while looking at the genome not in action, as well as take up little
        storage.
        Also, they should be fast to follow through while in action, thus genes
        should have little access time to their neighbours.
        Storage oriented structure:
            List of tuples of gene-id and gene-weight. Extremely storage effi-
            cient and easy to mutate/breed.
          ☐ disabled flag
          ☐ Small storage requirement
          ☐ Easily breedable
          ☐ Easily mutateable
          ☐ Easy to construct into a usage-oriented representation
        Analysis oriented structure:
          Adjacency-list. Easy to test for coherence and to analyze for recur-
          ring patterns.
        Usage oriented structure:
            Node objects, neighbours in lists. Allows fast traversal.
            Genome contains topologically sorted list of hidden-layer nodes.
          ☐ Small lookup time from a node to it's neighbours.
          ☐ Storage for a current value
          ☐ Nodes know their predecessors to determine, when they are done calculating their new value
          ☐ If there are cycle-marked edges in the storage structure, the corresponding start-node needs a default value
          Signature for Nodes:
            ☐ reset()
              maybe not necessary? maybe the last stored value can be reused under some condition as some sort of memory
              resets the currently stored value
              resets done to false
            ☐ addValue(long double)
              called by predecessors with their value * weight
            ☐ neighbours()
              a iterable list of neighbour/weight tuples
            ☐ Input nodes are manually started and not resetted
            ☐ Output nodes are manually resetted and not started
      Coherency analysis:
        ☐ **Forbid incoherency or use it as a fitness malus?**
        ☐ Recognize cycles and mark cycle closing edges
          ☐ cycle closing edges must have a default value to use in the first simulation
            ☐ In the simulation structure, this default values can be used as the initial value of 'cycle nodes'
          ☐ these edges must be marked somehow in the original storage representation so that they can be used when constructing the usage representation
        ☐ All Input Nodes must be connected to at least one hidden layer node
        ☐ All Output Nodes must be connected to at least one hidden layer node
        ☐ All Gene weights must be between 0 and 1
        ☐ There must be no nodes with an out-degree or in-degree of 0
          ☐ There may be nodes with an in-degree of 0 and a default value?
          ☐ nodes with an out-degree of 0 are useless and can simply be removed
        ☐ If analysis includes modification, it has to modify the storage-structure too!
          ☐ So there actually needs to be a way to apply patches to the storage or to convert analysis-structure to storage-structure
    Fitness Analysis / Reproduction:
      ☐ Fitness is evaluated after each simulation
      ☐ Fixed population size /
      ☐ lowest performing individuals in a given cluster are removed (ratio? tbd)
      ☐ after clustering: lowest performing clusters are removed (ratio^2)
        ☐ criteria for removing clusters:
          ☐ Consistent low performance over time (tracking?)
          ☐ Only if fitness difference is significant (threshold?)
          ☐ If too many clusters exist / cluster size is too small?
        ☐ new clusters can be created on removal by inter-breeding top performing clusters
      ☐ when individuals are removed, the difference in actual and desired cluster size is refilled by inbreeding ô.ô
        ☐ 2 options for reproduction:
          ☐ I  - Mutation of a single genome
          ☐ II - Breeding of 2 genomes
        ☐ Probability ratio of options?
          ☐ Idea 1: Partially defined function consisting of log for low x values / linear func for higher x values (Interval sizes?)
            ☐ Rationale: Mutations should be encouraged in lower generations in order to establish genetic diversity / network complexity
             ☐ linear func should never reach d/dx = 0, in order to keep mutation going
    Breeder:
      Breeds two Genomes into a new one.
      ☐ Detect, if two Genomes are compatible
      ☐ Create a new Genome deterministically based on two given genomes
      ☐ Create a new Genome non-deterministically based on two given genomes
    Mutator:
      Mutates a Genome randomly
      ☐ Add a Gene
        ☐ Add a Node
          i.e. if a gene encodes 1->5, add a new node and double the gene to
          1->9, 9->5 where 9 does not exist (in the Genome) yet
        ☐ Add an Edge
          i.e. add a random gene that is not contained in the genome yet and
          does not reduce coherency
    Simulator:
      Calculates the fitness of a given Genome based on an arbitrary Simulation.
      This can be a simple calculation or even a dedicated physical simulation.
      ☐ simulates steps over the genome:
        ☐ Give input to the input nodes
        ☐ Use default values for 'cycle nodes'
        ☐ Start the nodes' processes to inform their neighbours
        ☐ Reads output from the output nodes, once they are all marked as done
        ☐ Repeat
